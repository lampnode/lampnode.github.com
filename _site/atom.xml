<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>LAMPNode</title>
 <link href="http://lampnode.github.com/atom.xml" rel="self"/>
 <link href="http://lampnode.github.com"/>
 <updated>2013-02-14T19:56:44+08:00</updated>
 <id>http://lampnode.github.com</id>
 <author>
   <name>Robert  Chain</name>
   <email>robert.c@lampnode.com</email>
 </author>

 
 <entry>
   <title>使用Subversion管理软件开发代码</title>
   <link href="http://lampnode.github.com/Development/2013/02/13/managing-software-development-with-subversion"/>
   <updated>2013-02-13T00:00:00+08:00</updated>
   <id>http://lampnode.github.com/Development/2013/02/13/managing-software-development-with-subversion</id>
   <content type="html">&lt;h2 id='repository_layout'&gt;Repository Layout&lt;/h2&gt;

&lt;h3 id='trunk'&gt;trunk&lt;/h3&gt;

&lt;p&gt;Trunk是用于进行开发的主干代码存储位置。这里包含的都是最新的，可运行的软件代码（开发模式）。Trunk没有版本号和发布名称。 仅需要保证trunk在任何时候都处于“开发模式”。 其版本号命名规则：X.X.dev(最新主版本号.最新子版本号.dev)&lt;/p&gt;

&lt;h3 id='branchs'&gt;branchs&lt;/h3&gt;

&lt;p&gt;根据开发计划或者你想冻结新特色的添加时或者进行一些新的技术尝试的时候，就要使用Branches了。Brahches路径包含了trunk在不同发展阶段的副本。可以分为如下2中类型：&lt;/p&gt;

&lt;h3 id='release_branches'&gt;Release Branches&lt;/h3&gt;

&lt;p&gt;根据开发计划，发布软件的一个版本的时候，就要使用Release Branches， Release branches只是你当前trunk的一个副本，是软件开发到已经阶段的里程碑。 其版本号命名规则：X.X.build-(主版本号.子版本号.build-SVN revision版本号)，分支路径命名规则为:X.X.build&lt;/p&gt;

&lt;h3 id='experimental_branches'&gt;Experimental branches&lt;/h3&gt;

&lt;p&gt;如果想尝试新的技术（如PHP版本升级），可以建议Experimental branches。 其版本号命名规则：X.X.test-(主版本号.子版本号.test-SVN revision版本号);分支路径命名规则为:X.X.test&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Using Rsync with SSH to backup data</title>
   <link href="http://lampnode.github.com/Linux/2013/02/12/using-rsync-with-ssh-to-backup-data"/>
   <updated>2013-02-12T00:00:00+08:00</updated>
   <id>http://lampnode.github.com/Linux/2013/02/12/using-rsync-with-ssh-to-backup-data</id>
   <content type="html">&lt;p&gt;This document covers using cron, ssh, and rsync to backup data.You will need these packages installed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;rsync&lt;/li&gt;

&lt;li&gt;openssh&lt;/li&gt;

&lt;li&gt;cron&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='commands'&gt;commands&lt;/h2&gt;

&lt;h3 id='without_delete_flag'&gt;Without delete flag&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;edwin@easydocs:~$ rsync -avz -e ssh remoteuser@remotehost:/remote/dir /local/dir/ &lt;/code&gt;&lt;/pre&gt;

&lt;h3 id='with_delete_flag'&gt;With delete flag&lt;/h3&gt;

&lt;p&gt;By default, rsync will only copy files and directories, but not remove them from the destination copy when they are removed from the source. To keep the copies exact, include the &amp;#8211;delete flag:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;edwin@easydocs:~$ rsync -ave ssh  --delete remoteuser@remotehost:/remote/dir /local/dir/ &lt;/code&gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>Setup static ip on CentOS 6</title>
   <link href="http://lampnode.github.com/Linux/2013/02/12/setup-static-ip-on-centos-6"/>
   <updated>2013-02-12T00:00:00+08:00</updated>
   <id>http://lampnode.github.com/Linux/2013/02/12/setup-static-ip-on-centos-6</id>
   <content type="html">&lt;h2 id='test_context'&gt;Test Context&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;CentOs 6.3&lt;/li&gt;

&lt;li&gt;Localhost IP:192.168.0.7&lt;/li&gt;

&lt;li&gt;Gateway: 192.168.0.1&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='setup'&gt;Setup&lt;/h2&gt;

&lt;h3 id='ifcfgeth0'&gt;ifcfg-eth0&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;[root@edwin] vim /etc/sysconfig/network-scripts/ifcfg-eth0&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The config example is the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DEVICE=eth0
NM_CONTROLLED=yes
ONBOOT=yes
BOOTPROTO=static
HWADDR=00:21:85:12:57:06
TYPE=Ethernet
UUID=6a129ba5-6430-40cc-b863-882ec2f3d34d
IPADDR=192.168.0.7
NETMASK=255.255.255.0
GATEWAY=192.168.0.1
USERCTL=no
DNS1=8.8.8.8
DNS2=8.8.4.4&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id='resolvconf'&gt;resolv.conf&lt;/h3&gt;

&lt;p&gt;Note:If your have add DNS1 (and DNS2) in the ifcif-eth0; this step could skip.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@edwin]vim /etc/resolv.conf&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The config example is the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nameserver 8.8.8.8
nameserver 8.8.4.4&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id='networkoption'&gt;network(Option)&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;[root@edwin]vim /etc/sysconfig/network&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The config example is the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;NETWORKING=yes
NETWORKING_IPV6=no
HOSTNAME=CentOS&lt;/code&gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>Minimal Services on CentOS</title>
   <link href="http://lampnode.github.com/Linux/2013/02/12/minimal-services-on-centos"/>
   <updated>2013-02-12T00:00:00+08:00</updated>
   <id>http://lampnode.github.com/Linux/2013/02/12/minimal-services-on-centos</id>
   <content type="html">&lt;p&gt;This will improve the performance of a system by disabling unneeded services. Another benefit is reduced hardware requirements for your server.&lt;/p&gt;

&lt;h2 id='methodology_of_minimal_services'&gt;Methodology of Minimal Services&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Perform minimal OS installations&lt;/li&gt;

&lt;li&gt;Install additional software as needed after installation&lt;/li&gt;

&lt;li&gt;Minimal installations reduce the number of packages requiring updates&lt;/li&gt;

&lt;li&gt;No graphical environment needed on servers&lt;/li&gt;

&lt;li&gt;Limiting the Number of Running Services&lt;/li&gt;

&lt;li&gt;List of system services&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is a list of services(daemons) to help you decide what to axe. Here is another list. After performing a minimal installation, the machine reboots. When you login disable as many services as possible with the following commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;chkconfig anacron off
chkconfig apmd off
chkconfig atd off
chkconfig autofs off
chkconfig cpuspeed off
chkconfig cups off
chkconfig cups-config-daemon off
chkconfig gpm off
chkconfig isdn off
chkconfig netfs off
chkconfig nfslock off
chkconfig openibd off
chkconfig pcmcia off
chkconfig portmap off
chkconfig rawdevices off
chkconfig readahead_early off
chkconfig rpcgssd off
chkconfig rpcidmapd off
chkconfig smartd off
chkconfig xfs off
chkconfig ip6tables off
chkconfig avahi-daemon off
chkconfig firstboot off
chkconfig yum-updatesd off 
chkconfig sendmail off
chkconfig mcstrans off
chkconfig pcscd off
chkconfig bluetooth off
chkconfig hidd off&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next group of services is more useful to servers in some circumstances.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;xinetd may be needed for some servers&lt;/li&gt;

&lt;li&gt;acpid needed for power button to shut down server gently&lt;/li&gt;

&lt;li&gt;microcode_ctl not needed on AMD machines&lt;/li&gt;

&lt;li&gt;haldaem and messagebus support for plug and play devices&lt;/li&gt;

&lt;li&gt;mdmonitor not needed unless running software RAID&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Evaluate their worth even more closely before disabling them.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;chkconfig xinetd off
chkconfig acpid off
chkconfig microcode_ctl off
chkconfig haldaemon off
chkconfig messagebus off
chkconfig mdmonitor off&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='virtual_terminals'&gt;Virtual Terminals&lt;/h2&gt;

&lt;p&gt;You may also minimize on virtual terminals. The default is six virtual terminals. You can probably do with two. To disable them, edit the /etc/inittab file and comment out the ones that you do not want running like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Run gettys in standard runlevels
1:2345:respawn:/sbin/mingetty tty1
2:2345:respawn:/sbin/mingetty tty2
#3:2345:respawn:/sbin/mingetty tty3
#4:2345:respawn:/sbin/mingetty tty4
#5:2345:respawn:/sbin/mingetty tty5
#6:2345:respawn:/sbin/mingetty tty6&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='updating_and_rebooting'&gt;Updating and Rebooting&lt;/h2&gt;

&lt;p&gt;On any new install, it is a good idea to run &amp;#8220;yum update&amp;#8221; and then reboot the machine to apply the latest security and software updates. It is a good idea to reboot after the update to make sure that the system comes up properly.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>在Ubuntu 12.04上安装配置Touchpad Indicator</title>
   <link href="http://lampnode.github.com/Linux/2013/02/11/install-touchpad-indicator-in-ubuntu-1204"/>
   <updated>2013-02-11T00:00:00+08:00</updated>
   <id>http://lampnode.github.com/Linux/2013/02/11/install-touchpad-indicator-in-ubuntu-1204</id>
   <content type="html">&lt;p&gt;在Thinkpad系列笔记本上安装Ubuntu 系统，必不可少的会遇到Touchpad 的问题，我是比较讨厌Trackpoint 跟它同时使用，所以安装Touchpad-indicator来管理它.&lt;/p&gt;

&lt;h2 id='installation'&gt;Installation&lt;/h2&gt;

&lt;p&gt;安装Touchpad-indicator需要使用的第三方的库：PPA, 安装方法如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo add-apt-repository ppa:atareao/atareao&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后可以直接安装 touchpad indicator:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install touchpad-indicator&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='usage'&gt;Usage&lt;/h2&gt;

&lt;p&gt;安装好的Touchpad-indicator会在Applications菜单里，一般是放在 Accessories 这个子菜单里.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Harden SSH access on CentOS 6</title>
   <link href="http://lampnode.github.com/Linux/2013/02/11/harden-ssh-access-on-centos-6"/>
   <updated>2013-02-11T00:00:00+08:00</updated>
   <id>http://lampnode.github.com/Linux/2013/02/11/harden-ssh-access-on-centos-6</id>
   <content type="html">&lt;p&gt;In a few simple steps, you will be able to diminish risks of unauthorized ssh accesses Your ssh settings can be found in &amp;#8220;/etc/ssh/sshd_config&amp;#8221;, this is where you will have to modify the configuration settings below.&lt;/p&gt;

&lt;p&gt;Note: The config file is NOT &amp;#8220;/etc/ssh/ssh_config&amp;#8221;&lt;/p&gt;

&lt;h2 id='change_your_ssh_port'&gt;Change your ssh port&lt;/h2&gt;

&lt;h3 id='modify_config'&gt;Modify config&lt;/h3&gt;

&lt;p&gt;By default, ssh run on port 22. You will need to change this default value to an arbitrary port number :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@server.com]#vim /etc/ssh/sshd_config&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will require ssh connexions to use the 60125 port&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Port 60128&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='setup_iptables'&gt;Setup iptables&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;[root@server.com]# vim /etc/sysconfig/iptables&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add the following to this file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-A INPUT -m state --state NEW -m tcp -p tcp --dport 60128 -j ACCEPT&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Restart and check the the iptables:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@server.com]# /etc/init.d/iptables restart
[root@server.com]# iptables --list
Chain INPUT (policy ACCEPT)
target     prot opt source               destination         
ACCEPT     all  --  anywhere             anywhere            state RELATED,ESTABLISHED 
ACCEPT     icmp --  anywhere             anywhere            
ACCEPT     all  --  anywhere             anywhere            
ACCEPT     tcp  --  anywhere             anywhere            state NEW tcp dpt:ssh 
ACCEPT     tcp  --  anywhere             anywhere            state NEW tcp dpt:http 
ACCEPT     tcp  --  anywhere             anywhere            state NEW tcp dpt:https 
ACCEPT     tcp  --  anywhere             anywhere            state NEW tcp dpt:60128 

.......&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='disable_root_login'&gt;Disable root login&lt;/h2&gt;

&lt;p&gt;If the hacker still gets to connect to your ssh port, he will need authentication. Obvisously he will try the root account which grant maximum priviledge on the server, so you want to disable direct root ssh access.&lt;/p&gt;

&lt;p&gt;Find this line in your /etc/ssh/sshd_config and change its value to &amp;#8220;no&amp;#8221;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PermitRootLogin no&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='disable_protocol_1'&gt;Disable Protocol 1&lt;/h2&gt;

&lt;p&gt;SSH has two protocols it may use, protocol 1 and protocol 2. The older protocol 1 is less secure and should be disabled unless you know that you specifically require it. Look for the following line in the /etc/ssh/sshd_config file, uncomment it and amend as shown:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Protocol 2,1
Protocol 2&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='use_publicprivate_keys_for_authentication'&gt;Use Public/Private Keys for Authentication&lt;/h2&gt;

&lt;h3 id='clientcreate_publicprivate_key'&gt;Client:Create public/private key&lt;/h3&gt;

&lt;p&gt;First, create a public/private key pair on the client that you will use to connect to the server:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[edwin@client]$ ssh-keygen -t rsa&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will create two files in your (hidden) ~/.ssh directory called id_rsa and id_rsa.pub. id_rsa is your private key and id_rsa.pub is your public key. Now set permissions on your private key:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[edwin@client]$ chmod 700 ~/.ssh
[edwin@client]$ chmod 600 ~/.ssh/id_rsa &lt;/code&gt;&lt;/pre&gt;

&lt;h3 id='serversetup_authorized_keys'&gt;Server:Setup authorized_keys&lt;/h3&gt;

&lt;p&gt;Copy the public key (id_rsa.pub) to the server and install it to the authorized_keys list:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@server.com]# cat id_rsa.pub &amp;gt;&amp;gt; ~/.ssh/authorized_keys&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note: once you have imported the public key, you can delete it from the server.&lt;/p&gt;

&lt;p&gt;and finally set file permissions on the server:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@server.com]# chmod 700 ~/.ssh
[root@server.com]# chmod 600 ~/.ssh/authorized_keys&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above permissions are required if StrictModes is set to yes in /etc/ssh/sshd_config (the default).&lt;/p&gt;

&lt;h3 id='serversetup_sshd_config'&gt;Server:Setup sshd_config&lt;/h3&gt;

&lt;p&gt;Once you have checked you can successfully login to the server using your public/private key pair, you can disable password authentication completely by adding the following setting to your /etc/ssh/sshd_config file:&lt;/p&gt;

&lt;p&gt;Disable password authentication forcing use of keys PasswordAuthentication no&lt;/p&gt;

&lt;h3 id='serverrestart_sshd_service'&gt;Server:Restart sshd service&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;[root@server.com]# /etc/rc.d/init.d/sshd restart&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id='clienttest'&gt;Client:Test&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;[edwin@client]$ ssh root@server.com -p 60128&lt;/code&gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>在Ubuntu上安装Github和Jekyll</title>
   <link href="http://lampnode.github.com/Github/2013/02/05/install-github-and-jekyll-on-ubuntu"/>
   <updated>2013-02-05T00:00:00+08:00</updated>
   <id>http://lampnode.github.com/Github/2013/02/05/install-github-and-jekyll-on-ubuntu</id>
   <content type="html">&lt;p&gt;Jekyll is a Git compatible static site generator that can be installed on Ubuntu.&lt;/p&gt;

&lt;h2 id='installation'&gt;Installation&lt;/h2&gt;

&lt;h3 id='install_dependencies'&gt;Install Dependencies&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$sudo apt-get install git ruby rubygems python-pygments
$sudo gem install rdiscount&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id='install_jekyll'&gt;Install Jekyll&lt;/h3&gt;

&lt;p&gt;In order to preview your blog locally you will need to install the Jekyll ruby gem. $sudo gem install jekyll&lt;/p&gt;

&lt;h3 id='install_rake'&gt;Install rake&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$sudo gem install rake&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='usages'&gt;Usages&lt;/h2&gt;

&lt;h3 id='start_jekyll'&gt;Start Jekyll&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$cd USERNAME.github.com
$jekyll --server&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Your can access this by http://loclaohost:4000&lt;/p&gt;

&lt;h3 id='for_rake'&gt;For Rake&lt;/h3&gt;

&lt;h4 id='create_a_new_page'&gt;Create a new page&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;$rake page name=&amp;quot;about.md&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id='create_a_new_post'&gt;Create a new post&lt;/h4&gt;

&lt;p&gt;Begin a new post&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$rake post title=&amp;quot;Your post title&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The rake task automatically creates a file with properly formatted filename and YAML Front Matter. Make sure to specify your own title. By default, the date is the current date.&lt;/p&gt;

&lt;h2 id='commit_to_github'&gt;Commit to GitHub&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$git add .
$git commit -m &amp;quot;Add some content&amp;quot;
$git push origin master&lt;/code&gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>Jekyll Introduction</title>
   <link href="http://lampnode.github.com/lessons/2011/12/29/jekyll-introduction"/>
   <updated>2011-12-29T00:00:00+08:00</updated>
   <id>http://lampnode.github.com/lessons/2011/12/29/jekyll-introduction</id>
   <content type="html">&lt;p&gt;This Jekyll introduction will outline specifically what Jekyll is and why you would want to use it. Directly following the intro we&amp;#8217;ll learn exactly &lt;em&gt;how&lt;/em&gt; Jekyll does what it does.&lt;/p&gt;

&lt;h2 id='overview'&gt;Overview&lt;/h2&gt;

&lt;h3 id='what_is_jekyll'&gt;What is Jekyll?&lt;/h3&gt;

&lt;p&gt;Jekyll is a parsing engine bundled as a ruby gem used to build static websites from dynamic components such as templates, partials, liquid code, markdown, etc. Jekyll is known as &amp;#8220;a simple, blog aware, static site generator&amp;#8221;.&lt;/p&gt;

&lt;h3 id='examples'&gt;Examples&lt;/h3&gt;

&lt;p&gt;This website is created with Jekyll. &lt;a href='https://github.com/mojombo/jekyll/wiki/Sites'&gt;Other Jekyll websites&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id='what_does_jekyll_do'&gt;What does Jekyll Do?&lt;/h3&gt;

&lt;p&gt;Jekyll is a ruby gem you install on your local system. Once there you can call &lt;code&gt;jekyll --server&lt;/code&gt; on a directory and provided that directory is setup in a way jekyll expects, it will do magic stuff like parse markdown/textile files, compute categories, tags, permalinks, and construct your pages from layout templates and partials.&lt;/p&gt;

&lt;p&gt;Once parsed, Jekyll stores the result in a self-contained static &lt;code&gt;_site&lt;/code&gt; folder. The intention here is that you can serve all contents in this folder statically from a plain static web-server.&lt;/p&gt;

&lt;p&gt;You can think of Jekyll as a normalish dynamic blog but rather than parsing content, templates, and tags on each request, Jekyll does this once &lt;em&gt;beforehand&lt;/em&gt; and caches the &lt;em&gt;entire website&lt;/em&gt; in a folder for serving statically.&lt;/p&gt;

&lt;h3 id='jekyll_is_not_blogging_software'&gt;Jekyll is Not Blogging Software&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Jekyll is a parsing engine.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Jekyll does not come with any content nor does it have any templates or design elements. This is a common source of confusion when getting started. Jekyll does not come with anything you actually use or see on your website - you have to make it.&lt;/p&gt;

&lt;h3 id='why_should_i_care'&gt;Why Should I Care?&lt;/h3&gt;

&lt;p&gt;Jekyll is very minimalistic and very efficient. The most important thing to realize about Jekyll is that it creates a static representation of your website requiring only a static web-server. Traditional dynamic blogs like Wordpress require a database and server-side code. Heavily trafficked dynamic blogs must employ a caching layer that ultimately performs the same job Jekyll sets out to do; serve static content.&lt;/p&gt;

&lt;p&gt;Therefore if you like to keep things simple and you prefer the command-line over an admin panel UI then give Jekyll a try.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developers like Jekyll because we can write content like we write code:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ability to write content in markdown or textile in your favorite text-editor.&lt;/li&gt;

&lt;li&gt;Ability to write and preview your content via localhost.&lt;/li&gt;

&lt;li&gt;No internet connection required.&lt;/li&gt;

&lt;li&gt;Ability to publish via git.&lt;/li&gt;

&lt;li&gt;Ability to host your blog on a static web-server.&lt;/li&gt;

&lt;li&gt;Ability to host freely on GitHub Pages.&lt;/li&gt;

&lt;li&gt;No database required.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id='how_jekyll_works'&gt;How Jekyll Works&lt;/h1&gt;

&lt;p&gt;The following is a complete but concise outline of exactly how Jekyll works.&lt;/p&gt;

&lt;p&gt;Be aware that core concepts are introduced in rapid succession without code examples. This information is not intended to specifically teach you how to do anything, rather it is intended to give you the &lt;em&gt;full picture&lt;/em&gt; relative to what is going on in Jekyll-world.&lt;/p&gt;

&lt;p&gt;Learning these core concepts should help you avoid common frustrations and ultimately help you better understand the code examples contained throughout Jekyll-Bootstrap.&lt;/p&gt;

&lt;h2 id='initial_setup'&gt;Initial Setup&lt;/h2&gt;

&lt;p&gt;After &lt;a href='/index.html#start-now'&gt;installing jekyll&lt;/a&gt; you&amp;#8217;ll need to format your website directory in a way jekyll expects. Jekyll-bootstrap conveniently provides the base directory format.&lt;/p&gt;

&lt;h3 id='the_jekyll_application_base_format'&gt;The Jekyll Application Base Format&lt;/h3&gt;

&lt;p&gt;Jekyll expects your website directory to be laid out like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- _config.yml
|-- _includes
|-- _layouts
|   |-- default.html
|   |-- post.html
|-- _posts
|   |-- 20011-10-25-open-source-is-good.markdown
|   |-- 20011-04-26-hello-world.markdown
|-- _site
|-- index.html
|-- assets
    |-- css
        |-- style.css
    |-- javascripts&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_config.yml&lt;/strong&gt;&lt;br /&gt;Stores configuration data.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_includes&lt;/strong&gt;&lt;br /&gt;This folder is for partial views.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_layouts&lt;/strong&gt; &lt;br /&gt;This folder is for the main templates your content will be inserted into. You can have different layouts for different pages or page sections.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_posts&lt;/strong&gt;&lt;br /&gt;This folder contains your dynamic content/posts. the naming format is required to be &lt;code&gt;@YEAR-MONTH-DATE-title.MARKUP@&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_site&lt;/strong&gt;&lt;br /&gt;This is where the generated site will be placed once Jekyll is done transforming it.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;assets&lt;/strong&gt;&lt;br /&gt;This folder is not part of the standard jekyll structure. The assets folder represents &lt;em&gt;any generic&lt;/em&gt; folder you happen to create in your root directory. Directories and files not properly formatted for jekyll will be left untouched for you to serve normally.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(read more: &lt;a href='https://github.com/mojombo/jekyll/wiki/Usage'&gt;https://github.com/mojombo/jekyll/wiki/Usage&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id='jekyll_configuration'&gt;Jekyll Configuration&lt;/h3&gt;

&lt;p&gt;Jekyll supports various configuration options that are fully outlined here: &lt;a href='https://github.com/mojombo/jekyll/wiki/Configuration'&gt;https://github.com/mojombo/jekyll/wiki/Configuration&lt;/a&gt;&lt;/p&gt;

&lt;h2 id='content_in_jekyll'&gt;Content in Jekyll&lt;/h2&gt;

&lt;p&gt;Content in Jekyll is either a post or a page. These content &amp;#8220;objects&amp;#8221; get inserted into one or more templates to build the final output for its respective static-page.&lt;/p&gt;

&lt;h3 id='posts_and_pages'&gt;Posts and Pages&lt;/h3&gt;

&lt;p&gt;Both posts and pages should be written in markdown, textile, or HTML and may also contain Liquid templating syntax. Both posts and pages can have meta-data assigned on a per-page basis such as title, url path, as well as arbitrary custom meta-data.&lt;/p&gt;

&lt;h3 id='working_with_posts'&gt;Working With Posts&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Post&lt;/strong&gt; &lt;br /&gt;Posts are created by properly formatting a file and placing it the &lt;code&gt;_posts&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;&lt;br /&gt;A post must have a valid filename in the form &lt;code&gt;YEAR-MONTH-DATE-title.MARKUP&lt;/code&gt; and be placed in the &lt;code&gt;_posts&lt;/code&gt; directory. If the data format is invalid Jekyll will not recognize the file as a post. The date and title are automatically parsed from the filename of the post file. Additionally, each file must have &lt;a href='https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter'&gt;YAML Front-Matter&lt;/a&gt; prepended to its content. YAML Front-Matter is a valid YAML syntax specifying meta-data for the given file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Order&lt;/strong&gt;&lt;br /&gt;Ordering is an important part of Jekyll but it is hard to specify a custom ordering strategy. Only reverse chronological and chronological ordering is supported in Jekyll.&lt;/p&gt;

&lt;p&gt;Since the date is hard-coded into the filename format, to change the order, you must change the dates in the filenames.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt; &lt;br /&gt;Posts can have tags associated with them as part of their meta-data. Tags may be placed on posts by providing them in the post&amp;#8217;s YAML front matter. You have access to the post-specific tags in the templates. These tags also get added to the sitewide collection.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories&lt;/strong&gt; &lt;br /&gt;Posts may be categorized by providing one or more categories in the YAML front matter. Categories offer more significance over tags in that they can be reflected in the URL path to the given post. Note categories in Jekyll work in a specific way. If you define more than one category you are defining a category hierarchy &amp;#8220;set&amp;#8221;. Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
title :  Hello World
categories : [lessons, beginner]
---&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This defines the category hierarchy &amp;#8220;lessons/beginner&amp;#8221;. Note this is &lt;em&gt;one category&lt;/em&gt; node in Jekyll. You won&amp;#8217;t find &amp;#8220;lessons&amp;#8221; and &amp;#8220;beginner&amp;#8221; as two separate categories unless you define them elsewhere as singular categories.&lt;/p&gt;

&lt;h3 id='working_with_pages'&gt;Working With Pages&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Page&lt;/strong&gt;&lt;br /&gt;Pages are created by properly formatting a file and placing it anywhere in the root directory or subdirectories that do &lt;em&gt;not&lt;/em&gt; start with an underscore.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;&lt;br /&gt;In order to register as a Jekyll page the file must contain &lt;a href='https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter'&gt;YAML Front-Matter&lt;/a&gt;. Registering a page means 1) that Jekyll will process the page and 2) that the page object will be available in the &lt;code&gt;site.pages&lt;/code&gt; array for inclusion into your templates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories and Tags&lt;/strong&gt;&lt;br /&gt;Pages do not compute categories nor tags so defining them will have no effect.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sub-Directories&lt;/strong&gt;&lt;br /&gt;If pages are defined in sub-directories, the path to the page will be reflected in the url. Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- people
    |-- bob
        |-- essay.html&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This page will be available at &lt;code&gt;http://yourdomain.com/people/bob/essay.html&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recommended Pages&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index.html&lt;/strong&gt;&lt;br /&gt;You will always want to define the root index.html page as this will display on your root URL.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;404.html&lt;/strong&gt;&lt;br /&gt;Create a root 404.html page and GitHub Pages will serve it as your 404 response.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;sitemap.html&lt;/strong&gt;&lt;br /&gt;Generating a sitemap is good practice for SEO.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;about.html&lt;/strong&gt;&lt;br /&gt;A nice about page is easy to do and gives the human perspective to your website.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='templates_in_jekyll'&gt;Templates in Jekyll&lt;/h2&gt;

&lt;p&gt;Templates are used to contain a page&amp;#8217;s or post&amp;#8217;s content. All templates have access to a global site object variable: &lt;code&gt;site&lt;/code&gt; as well as a page object variable: &lt;code&gt;page&lt;/code&gt;. The site variable holds all accessible content and metadata relative to the site. The page variable holds accessible data for the given page or post being rendered at that point.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create a Template&lt;/strong&gt;&lt;br /&gt;Templates are created by properly formatting a file and placing it in the &lt;code&gt;_layouts&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;&lt;br /&gt;Templates should be coded in HTML and contain YAML Front Matter. All templates can contain Liquid code to work with your site&amp;#8217;s data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rending Page/Post Content in a Template&lt;/strong&gt;&lt;br /&gt;There is a special variable in all templates named : &lt;code&gt;content&lt;/code&gt;. The &lt;code&gt;content&lt;/code&gt; variable holds the page/post content including any sub-template content previously defined. Render the content variable wherever you want your main content to be injected into your template:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;...
&amp;lt;body&amp;gt;
  &amp;lt;div id=&quot;sidebar&quot;&amp;gt; ... &amp;lt;/div&amp;gt;
  &amp;lt;div id=&quot;main&quot;&amp;gt;
    &amp;#123;{content}&amp;#125;
  &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
...&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id='subtemplates'&gt;Sub-Templates&lt;/h3&gt;

&lt;p&gt;Sub-templates are exactly templates with the only difference being they define another &amp;#8220;root&amp;#8221; layout/template within their YAML Front Matter. This essentially means a template will render inside of another template.&lt;/p&gt;

&lt;h3 id='includes'&gt;Includes&lt;/h3&gt;

&lt;p&gt;In Jekyll you can define include files by placing them in the &lt;code&gt;_includes&lt;/code&gt; folder. Includes are NOT templates, rather they are just code snippets that get included into templates. In this way, you can treat the code inside includes as if it was native to the parent template.&lt;/p&gt;

&lt;p&gt;Any valid template code may be used in includes.&lt;/p&gt;

&lt;h2 id='using_liquid_for_templating'&gt;Using Liquid for Templating&lt;/h2&gt;

&lt;p&gt;Templating is perhaps the most confusing and frustrating part of Jekyll. This is mainly due to the fact that Jekyll templates must use the Liquid Templating Language.&lt;/p&gt;

&lt;h3 id='what_is_liquid'&gt;What is Liquid?&lt;/h3&gt;

&lt;p&gt;&lt;a href='https://github.com/Shopify/liquid'&gt;Liquid&lt;/a&gt; is a secure templating language developed by &lt;a href='http://shopify.com'&gt;Shopify&lt;/a&gt;. Liquid is designed for end-users to be able to execute logic within template files without imposing any security risk on the hosting server.&lt;/p&gt;

&lt;p&gt;Jekyll uses Liquid to generate the post content within the final page layout structure and as the primary interface for working with your site and post/page data.&lt;/p&gt;

&lt;h3 id='why_do_we_have_to_use_liquid'&gt;Why Do We Have to Use Liquid?&lt;/h3&gt;

&lt;p&gt;GitHub uses Jekyll to power &lt;a href='http://pages.github.com/'&gt;GitHub Pages&lt;/a&gt;. GitHub cannot afford to run arbitrary code on their servers so they lock developers down via Liquid.&lt;/p&gt;

&lt;h3 id='liquid_is_not_programmerfriendly'&gt;Liquid is Not Programmer-Friendly.&lt;/h3&gt;

&lt;p&gt;The short story is liquid is not real code and its not intended to execute real code. The point being you can&amp;#8217;t do jackshit in liquid that hasn&amp;#8217;t been allowed explicitly by the implementation. What&amp;#8217;s more you can only access data-structures that have been explicitly passed to the template.&lt;/p&gt;

&lt;p&gt;In Jekyll&amp;#8217;s case it is not possible to alter what is passed to Liquid without hacking the gem or running custom plugins. Both of which cannot be supported by GitHub Pages.&lt;/p&gt;

&lt;p&gt;As a programmer - this is very frustrating.&lt;/p&gt;

&lt;p&gt;But rather than look a gift horse in the mouth we are going to suck it up and view it as an opportunity to work around limitations and adopt client-side solutions when possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aside&lt;/strong&gt; &lt;br /&gt;My personal stance is to not invest time trying to hack liquid. It&amp;#8217;s really unnecessary &lt;em&gt;from a programmer&amp;#8217;s&lt;/em&gt; perspective. That is to say if you have the ability to run custom plugins (i.e. run arbitrary ruby code) you are better off sticking with ruby. Toward that end I&amp;#8217;ve built &lt;a href='http://github.com/plusjade/mustache-with-jekyll'&gt;Mustache-with-Jekyll&lt;/a&gt;&lt;/p&gt;

&lt;h2 id='static_assets'&gt;Static Assets&lt;/h2&gt;

&lt;p&gt;Static assets are any file in the root or non-underscored subfolders that are not pages. That is they have no valid YAML Front Matter and are thus not treated as Jekyll Pages.&lt;/p&gt;

&lt;p&gt;Static assets should be used for images, css, and javascript files.&lt;/p&gt;

&lt;h2 id='how_jekyll_parses_files'&gt;How Jekyll Parses Files&lt;/h2&gt;

&lt;p&gt;Remember Jekyll is a processing engine. There are two main types of parsing in Jekyll.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Content parsing.&lt;/strong&gt; &lt;br /&gt;This is done with textile or markdown.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Template parsing.&lt;/strong&gt; &lt;br /&gt;This is done with the liquid templating language.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And thus there are two main types of file formats needed for this parsing.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Post and Page files.&lt;/strong&gt;&lt;br /&gt;All content in Jekyll is either a post or a page so valid posts and pages are parsed with markdown or textile.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Template files.&lt;/strong&gt; &lt;br /&gt;These files go in &lt;code&gt;_layouts&lt;/code&gt; folder and contain your blogs &lt;strong&gt;templates&lt;/strong&gt;. They should be made in HTML with the help of Liquid syntax. Since include files are simply injected into templates they are essentially parsed as if they were native to the template.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Arbitrary files and folders.&lt;/strong&gt; &lt;br /&gt;Files that &lt;em&gt;are not&lt;/em&gt; valid pages are treated as static content and pass through Jekyll untouched and reside on your blog in the exact structure and format they originally existed in.&lt;/p&gt;

&lt;h3 id='formatting_files_for_parsing'&gt;Formatting Files for Parsing.&lt;/h3&gt;

&lt;p&gt;We&amp;#8217;ve outlined the need for valid formatting using &lt;strong&gt;YAML Front Matter&lt;/strong&gt;. Templates, posts, and pages all need to provide valid YAML Front Matter even if the Matter is empty. This is the only way Jekyll knows you want the file processed.&lt;/p&gt;

&lt;p&gt;YAML Front Matter must be prepended to the top of template/post/page files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
layout: post
category : pages
tags : [how-to, jekyll]
---

... contents ...&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Three hyphens on a new line start the Front-Matter block and three hyphens on a new line end the block. The data inside the block must be valid YAML.&lt;/p&gt;

&lt;p&gt;Configuration parameters for YAML Front-Matter is outlined here: &lt;a href='https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter'&gt;A comprehensive explanation of YAML Front Matter&lt;/a&gt;&lt;/p&gt;

&lt;h4 id='defining_layouts_for_posts_and_templates_parsing'&gt;Defining Layouts for Posts and Templates Parsing.&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;layout&lt;/code&gt; parameter in the YAML Front Matter defines the template file for which the given post or template should be injected into. If a template file specifies its own layout, it is effectively being used as a &lt;code&gt;sub-template.&lt;/code&gt; That is to say loading a post file into a template file that refers to another template file with work in the way you&amp;#8217;d expect; as a nested sub-template.&lt;/p&gt;

&lt;h2 id='how_jekyll_generates_the_final_static_files'&gt;How Jekyll Generates the Final Static Files.&lt;/h2&gt;

&lt;p&gt;Ultimately, Jekyll&amp;#8217;s job is to generate a static representation of your website. The following is an outline of how that&amp;#8217;s done:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jekyll collects data.&lt;/strong&gt; &lt;br /&gt;Jekyll scans the posts directory and collects all posts files as post objects. It then scans the layout assets and collects those and finally scans other directories in search of pages.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jekyll computes data.&lt;/strong&gt; &lt;br /&gt;Jekyll takes these objects, computes metadata (permalinks, tags, categories, titles, dates) from them and constructs one big &lt;code&gt;site&lt;/code&gt; object that holds all the posts, pages, layouts, and respective metadata. At this stage your site is one big computed ruby object.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jekyll liquifies posts and templates.&lt;/strong&gt;&lt;br /&gt;Next jekyll loops through each post file and converts (through markdown or textile) and &lt;strong&gt;liquifies&lt;/strong&gt; the post inside of its respective layout(s). Once the post is parsed and liquified inside the the proper layout structure, the layout itself is &amp;#8220;liquified&amp;#8221;. &lt;br /&gt;&lt;strong&gt;Liquification&lt;/strong&gt; is defined as follows: Jekyll initiates a Liquid template, and passes a simpler hash representation of the ruby site object as well as a simpler hash representation of the ruby post object. These simplified data structures are what you have access to in the templates.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jekyll generates output.&lt;/strong&gt; &lt;br /&gt;Finally the liquid templates are &amp;#8220;rendered&amp;#8221;, thereby processing any liquid syntax provided in the templates and saving the final, static representation of the file.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Notes.&lt;/strong&gt;&lt;br /&gt;Because Jekyll computes the entire site in one fell swoop, each template is given access to a global &lt;code&gt;site&lt;/code&gt; hash that contains useful data. It is this data that you&amp;#8217;ll iterate through and format using the Liquid tags and filters in order to render it onto a given page.&lt;/p&gt;

&lt;p&gt;Remember, in Jekyll you are an end-user. Your API has only two components:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The manner in which you setup your directory.&lt;/li&gt;

&lt;li&gt;The liquid syntax and variables passed into the liquid templates.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All the data objects available to you in the templates via Liquid are outlined in the &lt;strong&gt;API Section&lt;/strong&gt; of Jekyll-Bootstrap. You can also read the original documentation here: &lt;a href='https://github.com/mojombo/jekyll/wiki/Template-Data'&gt;https://github.com/mojombo/jekyll/wiki/Template-Data&lt;/a&gt;&lt;/p&gt;

&lt;h2 id='conclusion'&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope this paints a clearer picture of what Jekyll is doing and why it works the way it does. As noted, our main programming constraint is the fact that our API is limited to what is accessible via Liquid and Liquid only.&lt;/p&gt;

&lt;p&gt;Jekyll-bootstrap is intended to provide helper methods and strategies aimed at making it more intuitive and easier to work with Jekyll =)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thank you&lt;/strong&gt; for reading this far.&lt;/p&gt;

&lt;h2 id='next_steps'&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;Please take a look at &lt;a href='' /&gt; or jump right into &lt;a href=''&gt;Usage&lt;/a&gt; if you&amp;#8217;d like.&lt;/p&gt;</content>
 </entry>
 
 
</feed>